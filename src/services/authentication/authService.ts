/**
 * üîê AUTHENTICATION SERVICE - KINGPAY
 * ===================================
 * 
 * Servi√ßo de autentica√ß√£o seguindo a documenta√ß√£o dos endpoints
 * - Login com email e senha
 * - Cadastro de novos usu√°rios
 * - Gerenciamento de sess√£o
 */

import { supabase } from '../../lib/supabase';
import { ApiResponse } from '../../types/api';

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface SignUpData {
  email: string;
  password: string;
  fullName?: string;
}

export interface AuthUser {
  id: string;
  email: string;
  created_at: string;
  user_metadata?: any;
}

export interface AuthSession {
  access_token: string;
  refresh_token: string;
  expires_at: number;
  user: AuthUser;
}

class AuthenticationService {
  /**
   * Fazer login de um usu√°rio
   * Endpoint: POST /auth/v1/token
   */
  async signIn(credentials: LoginCredentials): Promise<ApiResponse<AuthSession>> {
    try {
      console.log('üîê Fazendo login...');
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email: credentials.email,
        password: credentials.password,
      });

      if (error) {
        console.error('‚ùå Erro no login:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      console.log('‚úÖ Login bem-sucedido!');
      return {
        success: true,
        data: data.session as AuthSession,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido no login';
      console.error('‚ùå Erro inesperado no login:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }

  /**
   * Criar nova conta de usu√°rio
   * Endpoint: POST /auth/v1/signup
   */
  async signUp(data: SignUpData): Promise<ApiResponse<AuthSession | null>> {
    try {
      console.log('üìù Criando nova conta...');
      
      const { data: authData, error } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          data: {
            full_name: data.fullName || '',
          }
        }
      });

      if (error) {
        console.error('‚ùå Erro no cadastro:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      console.log('‚úÖ Cadastro realizado!');
      return {
        success: true,
        data: authData.session as AuthSession | null,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido no cadastro';
      console.error('‚ùå Erro inesperado no cadastro:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }

  /**
   * Fazer logout do usu√°rio
   */
  async signOut(): Promise<ApiResponse<void>> {
    try {
      console.log('üö™ Fazendo logout...');
      
      const { error } = await supabase.auth.signOut();

      if (error) {
        console.error('‚ùå Erro no logout:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      console.log('‚úÖ Logout realizado!');
      return {
        success: true,
        data: undefined,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido no logout';
      console.error('‚ùå Erro inesperado no logout:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }

  /**
   * Obter sess√£o atual
   */
  async getSession(): Promise<ApiResponse<AuthSession | null>> {
    try {
      const { data, error } = await supabase.auth.getSession();

      if (error) {
        console.error('‚ùå Erro ao obter sess√£o:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      return {
        success: true,
        data: data.session as AuthSession | null,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido ao obter sess√£o';
      console.error('‚ùå Erro inesperado ao obter sess√£o:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }

  /**
   * Atualizar dados do usu√°rio
   */
  async updateUser(updates: Partial<AuthUser>): Promise<ApiResponse<AuthUser>> {
    try {
      console.log('üë§ Atualizando dados do usu√°rio...');
      
      const { data, error } = await supabase.auth.updateUser({
        data: updates
      });

      if (error) {
        console.error('‚ùå Erro ao atualizar usu√°rio:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      console.log('‚úÖ Usu√°rio atualizado!');
      return {
        success: true,
        data: data.user as AuthUser,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido ao atualizar usu√°rio';
      console.error('‚ùå Erro inesperado ao atualizar usu√°rio:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }

  /**
   * Resetar senha por email
   */
  async resetPassword(email: string): Promise<ApiResponse<void>> {
    try {
      console.log('üîÑ Enviando email de reset de senha...');
      
      const { error } = await supabase.auth.resetPasswordForEmail(email);

      if (error) {
        console.error('‚ùå Erro ao resetar senha:', error.message);
        return {
          success: false,
          error: error.message,
          data: null
        };
      }

      console.log('‚úÖ Email de reset enviado!');
      return {
        success: true,
        data: undefined,
        error: null
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido ao resetar senha';
      console.error('‚ùå Erro inesperado ao resetar senha:', errorMessage);
      return {
        success: false,
        error: errorMessage,
        data: null
      };
    }
  }
}

// Inst√¢ncia singleton
export const authService = new AuthenticationService();
export default authService; 