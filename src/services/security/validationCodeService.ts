/**
 * üîê SERVI√áO DE C√ìDIGOS DE VALIDA√á√ÉO - KINGPAY
 * ===========================================
 * 
 * M√≥dulo: C√≥digo de Seguran√ßa
 * Endpoints 3-4 da documenta√ß√£o INTEGRACAO.md
 * 
 * Implementa√ß√£o dos fluxos de gera√ß√£o e valida√ß√£o de c√≥digos
 * de seguran√ßa para opera√ß√µes sens√≠veis
 */

import { supabase } from '../../lib/supabase';

export interface ValidationCodeResponse {
  success: boolean;
  code?: string;
  expiresAt?: Date;
  message?: string;
}

export interface ValidateCodeResponse {
  success: boolean;
  valid: boolean;
  message?: string;
}

export class ValidationCodeService {
  
  /**
   * Endpoint 3: Gerar C√≥digo de Valida√ß√£o
   * POST /functions/v1/validation-codes/generate
   * 
   * Prop√≥sito: Gerar um c√≥digo de seguran√ßa √∫nico e com tempo 
   * de expira√ß√£o para um usu√°rio autenticado
   */
  async generateValidationCode(): Promise<ValidationCodeResponse> {
    try {
      console.log('üîê Gerando c√≥digo de valida√ß√£o...');

      const { data, error } = await supabase.functions.invoke('validation-codes/generate', {
        method: 'POST',
      });

      if (error) {
        console.error('‚ùå Erro ao gerar c√≥digo:', error.message);
        return {
          success: false,
          message: error.message
        };
      }

      console.log('‚úÖ C√≥digo de valida√ß√£o gerado');
      
      return {
        success: true,
        code: data.code,
        expiresAt: data.expiresAt ? new Date(data.expiresAt) : undefined,
        message: data.message
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado ao gerar c√≥digo:', error);
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Endpoint 4: Validar C√≥digo de Seguran√ßa
   * POST /functions/v1/validation-codes/validate
   * 
   * Prop√≥sito: Verificar se o c√≥digo fornecido pelo usu√°rio √© v√°lido,
   * n√£o expirado e corresponde ao usu√°rio logado
   */
  async validateCode(code: string): Promise<ValidateCodeResponse> {
    try {
      console.log('üîç Validando c√≥digo de seguran√ßa...');

      if (!code || code.trim().length === 0) {
        return {
          success: false,
          valid: false,
          message: 'C√≥digo n√£o pode estar vazio'
        };
      }

      const { data, error } = await supabase.functions.invoke('validation-codes/validate', {
        method: 'POST',
        body: { code: code.trim() },
      });

      if (error) {
        console.error('‚ùå Erro ao validar c√≥digo:', error.message);
        return {
          success: false,
          valid: false,
          message: error.message
        };
      }

      console.log('‚úÖ C√≥digo validado:', data.valid ? 'V√°lido' : 'Inv√°lido');
      
      return {
        success: true,
        valid: data.valid || false,
        message: data.message
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado ao validar c√≥digo:', error);
      return {
        success: false,
        valid: false,
        message: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Gerar e enviar c√≥digo por email (se suportado)
   */
  async generateAndSendCode(email?: string): Promise<ValidationCodeResponse> {
    try {
      console.log('üìß Gerando e enviando c√≥digo por email...');

      const body: any = {};
      if (email) {
        body.email = email;
      }

      const { data, error } = await supabase.functions.invoke('validation-codes/generate', {
        method: 'POST',
        body: Object.keys(body).length > 0 ? body : undefined,
      });

      if (error) {
        console.error('‚ùå Erro ao gerar e enviar c√≥digo:', error.message);
        return {
          success: false,
          message: error.message
        };
      }

      console.log('‚úÖ C√≥digo gerado e enviado por email');
      
      return {
        success: true,
        code: data.code,
        expiresAt: data.expiresAt ? new Date(data.expiresAt) : undefined,
        message: data.message || 'C√≥digo enviado por email'
      };

    } catch (error) {
      console.error('‚ùå Erro inesperado ao gerar e enviar c√≥digo:', error);
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Verificar se c√≥digo ainda √© v√°lido (sem consumi-lo)
   */
  async checkCodeStatus(code: string): Promise<{ valid: boolean; expiresAt?: Date }> {
    try {
      const { data, error } = await supabase.functions.invoke('validation-codes/check', {
        method: 'POST',
        body: { code: code.trim() },
      });

      if (error) {
        return { valid: false };
      }

      return {
        valid: data.valid || false,
        expiresAt: data.expiresAt ? new Date(data.expiresAt) : undefined
      };

    } catch (error) {
      console.error('‚ùå Erro ao verificar status do c√≥digo:', error);
      return { valid: false };
    }
  }

  /**
   * Invalidar c√≥digo (marcar como usado)
   */
  async invalidateCode(code: string): Promise<boolean> {
    try {
      console.log('üö´ Invalidando c√≥digo...');

      const { error } = await supabase.functions.invoke('validation-codes/invalidate', {
        method: 'POST',
        body: { code: code.trim() },
      });

      if (error) {
        console.error('‚ùå Erro ao invalidar c√≥digo:', error.message);
        return false;
      }

      console.log('‚úÖ C√≥digo invalidado');
      return true;

    } catch (error) {
      console.error('‚ùå Erro inesperado ao invalidar c√≥digo:', error);
      return false;
    }
  }
}

export const validationCodeService = new ValidationCodeService(); 